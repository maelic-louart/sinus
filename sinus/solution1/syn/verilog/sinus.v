// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sinus_sinus,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu37p-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.899000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=23,HLS_SYN_LUT=147,HLS_VERSION=2020_2}" *)

module sinus (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        start_r,
        step,
        signal_1_V_din,
        signal_1_V_full_n,
        signal_1_V_write,
        signal_2_V_din,
        signal_2_V_full_n,
        signal_2_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   start_r;
input   step;
output  [31:0] signal_1_V_din;
input   signal_1_V_full_n;
output   signal_1_V_write;
output  [31:0] signal_2_V_din;
input   signal_2_V_full_n;
output   signal_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg signal_1_V_write;
reg signal_2_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp;
reg   [0:0] start_tmp;
reg   [7:0] n;
wire   [6:0] sin_table_address0;
reg    sin_table_ce0;
wire   [7:0] sin_table_q0;
wire   [6:0] sin_table_address1;
reg    sin_table_ce1;
wire   [7:0] sin_table_q1;
reg    signal_1_V_blk_n;
wire    ap_CS_fsm_state2;
reg   [0:0] guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250;
reg   [0:0] start_tmp_load_reg_254;
wire   [0:0] step_read_read_fu_54_p2;
wire   [0:0] start_read_read_fu_60_p2;
reg    signal_2_V_blk_n;
wire   [0:0] guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_load_fu_105_p1;
wire   [0:0] start_tmp_load_load_fu_121_p1;
wire   [0:0] icmp_ln13_fu_137_p2;
reg   [0:0] icmp_ln13_reg_261;
wire   [63:0] idxprom_i1_fu_167_p1;
wire   [63:0] idxprom_i4_fu_180_p1;
wire   [7:0] add_ln691_fu_231_p2;
reg    ap_predicate_op47_write_state2;
reg    ap_predicate_op48_write_state2;
reg    ap_block_state2;
wire  signed [31:0] sext_ln49_fu_225_p1;
wire   [5:0] trunc_ln5_1_fu_133_p1;
wire   [6:0] zext_ln18_fu_143_p1;
wire   [0:0] icmp_ln21_fu_153_p2;
wire   [6:0] idx_fu_147_p2;
wire   [6:0] idx_1_fu_159_p3;
wire   [6:0] trunc_ln5_fu_129_p1;
wire   [6:0] select_ln13_fu_172_p3;
wire   [0:0] tmp_fu_185_p3;
wire   [7:0] sub_ln31_fu_198_p2;
wire   [0:0] xor_ln17_fu_192_p2;
wire   [0:0] or_ln17_fu_212_p2;
wire   [8:0] zext_ln17_fu_208_p1;
wire  signed [8:0] sext_ln13_fu_204_p1;
wire   [8:0] signal_tmp_fu_217_p3;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp = 1'd0;
#0 start_tmp = 1'd0;
#0 n = 8'd0;
end

sinus_sin_table #(
    .DataWidth( 8 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
sin_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_table_address0),
    .ce0(sin_table_ce0),
    .q0(sin_table_q0),
    .address1(sin_table_address1),
    .ce1(sin_table_ce1),
    .q1(sin_table_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_load_fu_105_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp <= 1'd1;
        start_tmp <= start_r;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 <= guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (((guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_load_fu_105_p1 == 1'd0) & (start_read_read_fu_60_p2 == 1'd1) & (step_read_read_fu_54_p2 == 1'd1)) | ((start_tmp_load_load_fu_121_p1 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_load_fu_105_p1 == 1'd1) & (step_read_read_fu_54_p2 == 1'd1))))) begin
        icmp_ln13_reg_261 <= icmp_ln13_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((signal_1_V_full_n == 1'b0) & (ap_predicate_op47_write_state2 == 1'b1)) | ((signal_2_V_full_n == 1'b0) & (ap_predicate_op48_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2) & (((start_read_read_fu_60_p2 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd0)) | ((start_tmp_load_reg_254 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd1))))) begin
        n <= add_ln691_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_load_fu_105_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        start_tmp_load_reg_254 <= start_tmp;
    end
end

always @ (*) begin
    if ((~(((signal_1_V_full_n == 1'b0) & (ap_predicate_op47_write_state2 == 1'b1)) | ((signal_2_V_full_n == 1'b0) & (ap_predicate_op48_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((signal_1_V_full_n == 1'b0) & (ap_predicate_op47_write_state2 == 1'b1)) | ((signal_2_V_full_n == 1'b0) & (ap_predicate_op48_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((start_read_read_fu_60_p2 == 1'd1) & (step_read_read_fu_54_p2 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd0)) | ((step_read_read_fu_54_p2 == 1'd1) & (start_tmp_load_reg_254 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd1))))) begin
        signal_1_V_blk_n = signal_1_V_full_n;
    end else begin
        signal_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((signal_1_V_full_n == 1'b0) & (ap_predicate_op47_write_state2 == 1'b1)) | ((signal_2_V_full_n == 1'b0) & (ap_predicate_op48_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op47_write_state2 == 1'b1))) begin
        signal_1_V_write = 1'b1;
    end else begin
        signal_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((start_read_read_fu_60_p2 == 1'd1) & (step_read_read_fu_54_p2 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd0)) | ((step_read_read_fu_54_p2 == 1'd1) & (start_tmp_load_reg_254 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd1))))) begin
        signal_2_V_blk_n = signal_2_V_full_n;
    end else begin
        signal_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((signal_1_V_full_n == 1'b0) & (ap_predicate_op47_write_state2 == 1'b1)) | ((signal_2_V_full_n == 1'b0) & (ap_predicate_op48_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op48_write_state2 == 1'b1))) begin
        signal_2_V_write = 1'b1;
    end else begin
        signal_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sin_table_ce0 = 1'b1;
    end else begin
        sin_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sin_table_ce1 = 1'b1;
    end else begin
        sin_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((signal_1_V_full_n == 1'b0) & (ap_predicate_op47_write_state2 == 1'b1)) | ((signal_2_V_full_n == 1'b0) & (ap_predicate_op48_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln691_fu_231_p2 = (n + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = (((signal_1_V_full_n == 1'b0) & (ap_predicate_op47_write_state2 == 1'b1)) | ((signal_2_V_full_n == 1'b0) & (ap_predicate_op48_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op47_write_state2 = (((start_read_read_fu_60_p2 == 1'd1) & (step_read_read_fu_54_p2 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd0)) | ((step_read_read_fu_54_p2 == 1'd1) & (start_tmp_load_reg_254 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd1)));
end

always @ (*) begin
    ap_predicate_op48_write_state2 = (((start_read_read_fu_60_p2 == 1'd1) & (step_read_read_fu_54_p2 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd0)) | ((step_read_read_fu_54_p2 == 1'd1) & (start_tmp_load_reg_254 == 1'd1) & (guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_reg_250 == 1'd1)));
end

assign guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp_load_load_fu_105_p1 = guard_variable_for_sinus_bool_bool_stream_int_0_stream_int_0_start_tmp;

assign icmp_ln13_fu_137_p2 = ((n < 8'd65) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_153_p2 = ((n < 8'd192) ? 1'b1 : 1'b0);

assign idx_1_fu_159_p3 = ((icmp_ln21_fu_153_p2[0:0] == 1'b1) ? zext_ln18_fu_143_p1 : idx_fu_147_p2);

assign idx_fu_147_p2 = ($signed(7'd64) - $signed(zext_ln18_fu_143_p1));

assign idxprom_i1_fu_167_p1 = idx_1_fu_159_p3;

assign idxprom_i4_fu_180_p1 = select_ln13_fu_172_p3;

assign or_ln17_fu_212_p2 = (xor_ln17_fu_192_p2 | icmp_ln13_reg_261);

assign select_ln13_fu_172_p3 = ((icmp_ln13_fu_137_p2[0:0] == 1'b1) ? trunc_ln5_fu_129_p1 : idx_fu_147_p2);

assign sext_ln13_fu_204_p1 = $signed(sub_ln31_fu_198_p2);

assign sext_ln49_fu_225_p1 = $signed(signal_tmp_fu_217_p3);

assign signal_1_V_din = sext_ln49_fu_225_p1;

assign signal_2_V_din = sext_ln49_fu_225_p1;

assign signal_tmp_fu_217_p3 = ((or_ln17_fu_212_p2[0:0] == 1'b1) ? zext_ln17_fu_208_p1 : sext_ln13_fu_204_p1);

assign sin_table_address0 = idxprom_i4_fu_180_p1;

assign sin_table_address1 = idxprom_i1_fu_167_p1;

assign start_read_read_fu_60_p2 = start_r;

assign start_tmp_load_load_fu_121_p1 = start_tmp;

assign step_read_read_fu_54_p2 = step;

assign sub_ln31_fu_198_p2 = (8'd0 - sin_table_q1);

assign tmp_fu_185_p3 = n[32'd7];

assign trunc_ln5_1_fu_133_p1 = n[5:0];

assign trunc_ln5_fu_129_p1 = n[6:0];

assign xor_ln17_fu_192_p2 = (tmp_fu_185_p3 ^ 1'd1);

assign zext_ln17_fu_208_p1 = sin_table_q0;

assign zext_ln18_fu_143_p1 = trunc_ln5_1_fu_133_p1;

endmodule //sinus
